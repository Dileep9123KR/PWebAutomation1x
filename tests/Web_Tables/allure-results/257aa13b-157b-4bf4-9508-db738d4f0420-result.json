{"name": "test_web_tables", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidArgumentException: Message: unknown variant `//table[contains(@id,'custo')]//tbody/tr[2]/td[1]`, expected one of `css selector`, `link text`, `partial link text`, `tag name`, `xpath` at line 1 column 61", "trace": "def test_web_tables():\n        driver = webdriver.Firefox()\n        driver.maximize_window()\n        driver.get(\"https://awesomeqa.com/webtable.html\")\n    \n        # next step is to find how many rows and columns in the table\n        # Xpath - //table[@id='customers'] - for whole table\n        # Xpath - //table[contains(@id,'custo')]//tbody/tr -> for all table rows\n        # Xpath - //table[contains(@id,'custo')]//tbody/tr[2]/td -for columns\n    \n        row_elements = driver.find_elements(By.XPATH,\"//table[contains(@id,'custo')]//tbody/tr\")\n        row = len(row_elements)\n        print(row)\n    \n        col_elements = driver.find_elements(By.XPATH,\"//table[contains(@id,'custo')]//tbody/tr[2]/td\")\n        col = len(col_elements)\n        print(col)\n    \n        # select table contents- Iwant to select compamy \"Adobe\" and contact as \"Yoshi Tannamuri\"\n        # So the Xpath will be - //table[contains(@id,'custo')]//tbody/tr[6]/td[2]\n        # sometimes tr[](2-7) and td[](1-3) will be dynamic in nature\n    \n        first_part = \"//table[contains(@id,'custo')]//tbody/tr[\"\n        second_part = \"]/td[\"\n        third_part = \"]\"\n    \n        for i in range(2, row+1):\n            for j in range(1,col+1):\n                dynamic_path =f\"{first_part}{i}{second_part}{j}{third_part}\"\n                print(dynamic_path)\n>               print(driver.find_element(dynamic_path).text)\n\ntest_WebTables_01.py:37: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:742: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n..\\..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:348: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001A637A56C20>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid argument\",\"message\":\"unknown variant `//table[contains(@id,\\'cust...d one of `css selector`, `link text`, `partial link text`, `tag name`, `xpath` at line 1 column 61\",\"stacktrace\":\"\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidArgumentException: Message: unknown variant `//table[contains(@id,'custo')]//tbody/tr[2]/td[1]`, expected one of `css selector`, `link text`, `partial link text`, `tag name`, `xpath` at line 1 column 61\n\n..\\..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: InvalidArgumentException"}, "attachments": [{"name": "stdout", "source": "9f0c1151-c280-4e4a-92c0-db76527c63bc-attachment.txt", "type": "text/plain"}], "start": 1707286552279, "stop": 1707286560671, "uuid": "ca97a099-4171-484e-a54f-46d74604cf79", "historyId": "50d8249120679fbb73ad8b6bcb8d0016", "testCaseId": "50d8249120679fbb73ad8b6bcb8d0016", "fullName": "tests.Web_Tables.test_WebTables_01#test_web_tables", "labels": [{"name": "parentSuite", "value": "tests.Web_Tables"}, {"name": "suite", "value": "test_WebTables_01"}, {"name": "host", "value": "DESKTOP-24CIA9P"}, {"name": "thread", "value": "1244-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.Web_Tables.test_WebTables_01"}]}