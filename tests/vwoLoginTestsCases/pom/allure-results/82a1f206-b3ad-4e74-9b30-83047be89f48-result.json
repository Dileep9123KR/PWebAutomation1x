{"name": "test_hrApp_login_negative", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_NAME_NOT_RESOLVED\n  (Session info: chrome=120.0.6099.217)\nStacktrace:\n\tGetHandleVerifier [0x00007FF6FACD2142+3514994]\n\t(No symbol) [0x00007FF6FA8F0CE2]\n\t(No symbol) [0x00007FF6FA7976AA]\n\t(No symbol) [0x00007FF6FA78FB39]\n\t(No symbol) [0x00007FF6FA7825DD]\n\t(No symbol) [0x00007FF6FA7816FD]\n\t(No symbol) [0x00007FF6FA780746]\n\t(No symbol) [0x00007FF6FA7806EB]\n\t(No symbol) [0x00007FF6FA77EE3D]\n\t(No symbol) [0x00007FF6FA77F603]\n\t(No symbol) [0x00007FF6FA79A0FD]\n\t(No symbol) [0x00007FF6FA822E01]\n\t(No symbol) [0x00007FF6FA805FEA]\n\t(No symbol) [0x00007FF6FA8228F6]\n\t(No symbol) [0x00007FF6FA805D93]\n\t(No symbol) [0x00007FF6FA7D4BDC]\n\t(No symbol) [0x00007FF6FA7D5C64]\n\tGetHandleVerifier [0x00007FF6FACFE16B+3695259]\n\tGetHandleVerifier [0x00007FF6FAD56737+4057191]\n\tGetHandleVerifier [0x00007FF6FAD4E4E3+4023827]\n\tGetHandleVerifier [0x00007FF6FAA204F9+689705]\n\t(No symbol) [0x00007FF6FA8FC048]\n\t(No symbol) [0x00007FF6FA8F8044]\n\t(No symbol) [0x00007FF6FA8F81C9]\n\t(No symbol) [0x00007FF6FA8E88C4]\n\tBaseThreadInitThunk [0x00007FFF38427344+20]\n\tRtlUserThreadStart [0x00007FFF392026B1+33]", "trace": "self = <test_hrAppLogin.TestLogin object at 0x0000018D8C33D990>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"fa74287b3349eda7e1dcca1c4018dc71\")>\n\n    @allure.epic(\"HR Module Test\")\n    @allure.feature(\"TC#0 - HR App Negative Test\")\n    @pytest.mark.usefixtures(\"setup\")\n    def test_hrApp_login_negative(self, setup):\n        driver = setup\n>       driver.get(self.hr_url)\n\ntest_hrAppLogin.py:16: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:357: in get\n    self.execute(Command.GET, {\"url\": url})\n..\\..\\..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:348: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000018D8C3806A0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: net::ERR_NAME_NOT_RESOLVED\\\\n  (...07FF6FA8E88C4]\\\\n\\\\tBaseThreadInitThunk [0x00007FFF38427344+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFF392026B1+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_NAME_NOT_RESOLVED\nE         (Session info: chrome=120.0.6099.217)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6FACD2142+3514994]\nE       \t(No symbol) [0x00007FF6FA8F0CE2]\nE       \t(No symbol) [0x00007FF6FA7976AA]\nE       \t(No symbol) [0x00007FF6FA78FB39]\nE       \t(No symbol) [0x00007FF6FA7825DD]\nE       \t(No symbol) [0x00007FF6FA7816FD]\nE       \t(No symbol) [0x00007FF6FA780746]\nE       \t(No symbol) [0x00007FF6FA7806EB]\nE       \t(No symbol) [0x00007FF6FA77EE3D]\nE       \t(No symbol) [0x00007FF6FA77F603]\nE       \t(No symbol) [0x00007FF6FA79A0FD]\nE       \t(No symbol) [0x00007FF6FA822E01]\nE       \t(No symbol) [0x00007FF6FA805FEA]\nE       \t(No symbol) [0x00007FF6FA8228F6]\nE       \t(No symbol) [0x00007FF6FA805D93]\nE       \t(No symbol) [0x00007FF6FA7D4BDC]\nE       \t(No symbol) [0x00007FF6FA7D5C64]\nE       \tGetHandleVerifier [0x00007FF6FACFE16B+3695259]\nE       \tGetHandleVerifier [0x00007FF6FAD56737+4057191]\nE       \tGetHandleVerifier [0x00007FF6FAD4E4E3+4023827]\nE       \tGetHandleVerifier [0x00007FF6FAA204F9+689705]\nE       \t(No symbol) [0x00007FF6FA8FC048]\nE       \t(No symbol) [0x00007FF6FA8F8044]\nE       \t(No symbol) [0x00007FF6FA8F81C9]\nE       \t(No symbol) [0x00007FF6FA8E88C4]\nE       \tBaseThreadInitThunk [0x00007FFF38427344+20]\nE       \tRtlUserThreadStart [0x00007FFF392026B1+33]\n\n..\\..\\..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: WebDriverException"}, "start": 1706190007691, "stop": 1706190021761, "uuid": "cb8ce1ba-4ce5-482e-88cc-a54cb6dcf062", "historyId": "2023d0b05edc9257808653c8a3667f7d", "testCaseId": "2023d0b05edc9257808653c8a3667f7d", "fullName": "tests.vwoLoginTestsCases.pom.test_hrAppLogin.TestLogin#test_hrApp_login_negative", "labels": [{"name": "feature", "value": "TC#0 - HR App Negative Test"}, {"name": "epic", "value": "HR Module Test"}, {"name": "tag", "value": "@pytest.mark.usefixtures('setup')"}, {"name": "parentSuite", "value": "tests.vwoLoginTestsCases.pom"}, {"name": "suite", "value": "test_hrAppLogin"}, {"name": "subSuite", "value": "TestLogin"}, {"name": "host", "value": "DESKTOP-24CIA9P"}, {"name": "thread", "value": "17540-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.vwoLoginTestsCases.pom.test_hrAppLogin"}]}